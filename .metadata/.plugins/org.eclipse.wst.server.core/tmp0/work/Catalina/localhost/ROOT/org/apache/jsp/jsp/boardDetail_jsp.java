/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-04 01:13:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import com.koreait.web.SubVO;

public final class boardDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	private Connection getCon() throws Exception // 연결 메소드 getCon
	{
		String url = "jdbc:oracle:thin:@localhost:1521:orcl"; // DB정보
		String username = "hr";
		String password = "koreait2020";
		Class.forName("oracle.jdbc.driver.OracleDriver"); 
		
		Connection con = DriverManager.getConnection(url, username, password); // .getConnection메소드는 static메소드다. 
		// 클래스명의 첫글자는 대문자가 쓰임, !!! Dri... : 클래스, .get... 메소드 클래스
		
		System.out.println("DB에 접속되었습니다.");
		
		return con;
	}

	SubVO so = new SubVO(); // vo 객체 생성 굉장히 중요. 반복문 밖에있으면 마지막 값만 나옴(마지막 주소값만 들고있기때문에)

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.koreait.web.SubVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write('\r');
      out.write('\n');
	
	String strI_board = request.getParameter("i_board"); // request는 패키지, getParameter는 메소드
	
	if(strI_board == null)
	{

      out.write("\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t\talert('잘못된 접근입니다.');\r\n");
      out.write("\t\t\tlocation.href='/jsp/boardList.jsp';\r\n");
      out.write("\t\t</script>\r\n");

		return;
	}

      out.write('\r');
      out.write('\n');

	List<SubVO> boardList = new ArrayList(); // BoardVO 클래스에서 값들고오기
	
	Connection con = null; // db연결 할때 사용
	PreparedStatement ps = null; // sql문을 담당 / 완성
	ResultSet rs = null; // DB에 접속
	
	int i_board = Integer.parseInt(strI_board);
	String sql = " SELECT title, cont, i_student FROM t_board WHERE i_board = ? ";

	try 
	{
		con = getCon(); // 연결 위의 getCon메소드로 오라클에 연결
		ps = con.prepareStatement(sql); // 위의 sql문을 담아 ps변수에 복사
		ps.setInt(1, i_board); // 위의 sql문의 1번째 물음표에 i_board값을 넣겠다.
		// ps.setString(1, strI_board);
		rs = ps.executeQuery(); // sql문을 오라클데이터베이스에 접속

		if(rs.next())
		{
			String title = rs.getNString("title"); // 각 값들 들고와서 각 변수에 담아줌
			String content = rs.getNString("cont"); // N 이있으나 없으나 상관없음. 하지만 N을 붙히는게 최신방식
			int i_student = rs.getInt("i_student");
			
			so.setTitle(title); // 각 값을 넣기
			so.setCont(content);
			so.setI_student(i_student);
			
			boardList.add(so);
		}
	} 
	catch(Exception e) 
	{
		e.printStackTrace();
	}
	finally
	{
		// 스택처럼 닫아줘야함
		// 위에서는 con->ps->rs로 선언했지만 rs->ps->con순으로 닫아줘야함.
		if(rs != null)
		{
			try {rs.close();}catch(Exception e){}
		}
		if(ps != null)
		{
			try {ps.close();}catch(Exception e){}
		}
		if(con != null)
		{
			try {con.close();}catch(Exception e){}
		}
	}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t\t<title>상세 페이지</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<div>상세 페이지 : ");
      out.print( strI_board );
      out.write("</div>\r\n");
      out.write("\t\t<a href=\"#\" onclick=\"procDel(");
      out.print(i_board);
      out.write(")\">삭제</a>\r\n");
      out.write("\t\t<a href=\"/jsp/boardMod.jsp?i_board=");
      out.print(i_board);
      out.write("\">수정</a>\r\n");
      out.write("\t\t<div>\t\r\n");
      out.write("\t\t\t<h1>제목 : ");
      out.print( so.getTitle() );
      out.write("</h1>\r\n");
      out.write("\t\t\t<h1>내용 : ");
      out.print( so.getCont() );
      out.write("</h1>\r\n");
      out.write("\t\t\t<h1>작성자번호 : ");
      out.print( so.getI_student() );
      out.write("</h1>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t\tfunction procDel(i_board) {\r\n");
      out.write("\t\t\t\tif(confirm('삭제하시겠습니까?')) {\r\n");
      out.write("\t\t\t\t\tlocation.href = '/jsp/boardDel.jsp?i_board=' + i_board;\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
